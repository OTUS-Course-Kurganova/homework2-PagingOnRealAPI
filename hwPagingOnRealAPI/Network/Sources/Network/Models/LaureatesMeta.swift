//
// LaureatesMeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LaureatesMeta: Codable, JSONEncodable, Hashable {

    public var offset: Int?
    public var limit: Int?
    public var sort: String?
    public var ID: Int?
    public var name: String?
    public var gender: String?
    public var motivation: String?
    public var affiliation: String?
    public var residence: String?
    public var birthDate: String?
    public var birthDateTo: String?
    public var deathDate: String?
    public var deathDateTo: String?
    public var foundedDate: String?
    public var birthCity: String?
    public var birthCountry: String?
    public var birthContinent: String?
    public var deathCity: String?
    public var deathCountry: String?
    public var deathContinent: String?
    public var foundedCity: String?
    public var foundedCountry: String?
    public var foundedContinent: String?
    public var headquartersCity: String?
    public var headquartersCountry: String?
    public var headquartersContinent: String?
    public var nobelPrizeYear: Int?
    public var yearTo: Int?
    public var nobelPrizeCategory: String?
    public var count: Int?

    public init(offset: Int? = nil, limit: Int? = nil, sort: String? = nil, ID: Int? = nil, name: String? = nil, gender: String? = nil, motivation: String? = nil, affiliation: String? = nil, residence: String? = nil, birthDate: String? = nil, birthDateTo: String? = nil, deathDate: String? = nil, deathDateTo: String? = nil, foundedDate: String? = nil, birthCity: String? = nil, birthCountry: String? = nil, birthContinent: String? = nil, deathCity: String? = nil, deathCountry: String? = nil, deathContinent: String? = nil, foundedCity: String? = nil, foundedCountry: String? = nil, foundedContinent: String? = nil, headquartersCity: String? = nil, headquartersCountry: String? = nil, headquartersContinent: String? = nil, nobelPrizeYear: Int? = nil, yearTo: Int? = nil, nobelPrizeCategory: String? = nil, count: Int? = nil) {
        self.offset = offset
        self.limit = limit
        self.sort = sort
        self.ID = ID
        self.name = name
        self.gender = gender
        self.motivation = motivation
        self.affiliation = affiliation
        self.residence = residence
        self.birthDate = birthDate
        self.birthDateTo = birthDateTo
        self.deathDate = deathDate
        self.deathDateTo = deathDateTo
        self.foundedDate = foundedDate
        self.birthCity = birthCity
        self.birthCountry = birthCountry
        self.birthContinent = birthContinent
        self.deathCity = deathCity
        self.deathCountry = deathCountry
        self.deathContinent = deathContinent
        self.foundedCity = foundedCity
        self.foundedCountry = foundedCountry
        self.foundedContinent = foundedContinent
        self.headquartersCity = headquartersCity
        self.headquartersCountry = headquartersCountry
        self.headquartersContinent = headquartersContinent
        self.nobelPrizeYear = nobelPrizeYear
        self.yearTo = yearTo
        self.nobelPrizeCategory = nobelPrizeCategory
        self.count = count
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offset
        case limit
        case sort
        case ID
        case name
        case gender
        case motivation
        case affiliation
        case residence
        case birthDate
        case birthDateTo
        case deathDate
        case deathDateTo
        case foundedDate
        case birthCity
        case birthCountry
        case birthContinent
        case deathCity
        case deathCountry
        case deathContinent
        case foundedCity
        case foundedCountry
        case foundedContinent
        case headquartersCity
        case headquartersCountry
        case headquartersContinent
        case nobelPrizeYear
        case yearTo
        case nobelPrizeCategory
        case count
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(sort, forKey: .sort)
        try container.encodeIfPresent(ID, forKey: .ID)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(motivation, forKey: .motivation)
        try container.encodeIfPresent(affiliation, forKey: .affiliation)
        try container.encodeIfPresent(residence, forKey: .residence)
        try container.encodeIfPresent(birthDate, forKey: .birthDate)
        try container.encodeIfPresent(birthDateTo, forKey: .birthDateTo)
        try container.encodeIfPresent(deathDate, forKey: .deathDate)
        try container.encodeIfPresent(deathDateTo, forKey: .deathDateTo)
        try container.encodeIfPresent(foundedDate, forKey: .foundedDate)
        try container.encodeIfPresent(birthCity, forKey: .birthCity)
        try container.encodeIfPresent(birthCountry, forKey: .birthCountry)
        try container.encodeIfPresent(birthContinent, forKey: .birthContinent)
        try container.encodeIfPresent(deathCity, forKey: .deathCity)
        try container.encodeIfPresent(deathCountry, forKey: .deathCountry)
        try container.encodeIfPresent(deathContinent, forKey: .deathContinent)
        try container.encodeIfPresent(foundedCity, forKey: .foundedCity)
        try container.encodeIfPresent(foundedCountry, forKey: .foundedCountry)
        try container.encodeIfPresent(foundedContinent, forKey: .foundedContinent)
        try container.encodeIfPresent(headquartersCity, forKey: .headquartersCity)
        try container.encodeIfPresent(headquartersCountry, forKey: .headquartersCountry)
        try container.encodeIfPresent(headquartersContinent, forKey: .headquartersContinent)
        try container.encodeIfPresent(nobelPrizeYear, forKey: .nobelPrizeYear)
        try container.encodeIfPresent(yearTo, forKey: .yearTo)
        try container.encodeIfPresent(nobelPrizeCategory, forKey: .nobelPrizeCategory)
        try container.encodeIfPresent(count, forKey: .count)
    }
}

