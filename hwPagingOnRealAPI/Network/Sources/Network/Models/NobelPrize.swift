//
// NobelPrize.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Model containing Nobel Prize information */
public struct NobelPrize: Codable, JSONEncodable, Hashable {

    public var awardYear: Int?
    public var category: Translation?
    public var categoryFullName: Translation?
    public var dateAwarded: Date?
    /** Prize amount given at the year of the award */
    public var prizeAmount: Int?
    /** Prize amount adjusted according to Index number yearly average */
    public var prizeAmountAdjusted: Int?
    public var topMotivation: Translation?
    public var laureates: [LaureateBasic]?

    public init(awardYear: Int? = nil, category: Translation? = nil, categoryFullName: Translation? = nil, dateAwarded: Date? = nil, prizeAmount: Int? = nil, prizeAmountAdjusted: Int? = nil, topMotivation: Translation? = nil, laureates: [LaureateBasic]? = nil) {
        self.awardYear = awardYear
        self.category = category
        self.categoryFullName = categoryFullName
        self.dateAwarded = dateAwarded
        self.prizeAmount = prizeAmount
        self.prizeAmountAdjusted = prizeAmountAdjusted
        self.topMotivation = topMotivation
        self.laureates = laureates
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case awardYear
        case category
        case categoryFullName
        case dateAwarded
        case prizeAmount
        case prizeAmountAdjusted
        case topMotivation
        case laureates
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(awardYear, forKey: .awardYear)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(categoryFullName, forKey: .categoryFullName)
        try container.encodeIfPresent(dateAwarded, forKey: .dateAwarded)
        try container.encodeIfPresent(prizeAmount, forKey: .prizeAmount)
        try container.encodeIfPresent(prizeAmountAdjusted, forKey: .prizeAmountAdjusted)
        try container.encodeIfPresent(topMotivation, forKey: .topMotivation)
        try container.encodeIfPresent(laureates, forKey: .laureates)
    }
}

