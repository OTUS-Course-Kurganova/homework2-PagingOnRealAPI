//
// LaureateBasic.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Short information about the Laureate */
public struct LaureateBasic: Codable, JSONEncodable, Hashable {

    public enum Portion: String, Codable, CaseIterable {
        case _1 = "1"
        case _12 = "1/2"
        case _13 = "1/3"
        case _14 = "1/4"
    }
    public enum SortOrder: String, Codable, CaseIterable {
        case _1 = "1"
        case _2 = "2"
        case _3 = "3"
    }
    public var id: Int?
    public var name: Translation?
    public var portion: Portion? = ._1
    public var sortOrder: SortOrder? = ._1
    public var motivation: Translation?
    public var links: ItemLinks?

    public init(id: Int? = nil, name: Translation? = nil, portion: Portion? = ._1, sortOrder: SortOrder? = ._1, motivation: Translation? = nil, links: ItemLinks? = nil) {
        self.id = id
        self.name = name
        self.portion = portion
        self.sortOrder = sortOrder
        self.motivation = motivation
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case portion
        case sortOrder
        case motivation
        case links
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(portion, forKey: .portion)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(motivation, forKey: .motivation)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

