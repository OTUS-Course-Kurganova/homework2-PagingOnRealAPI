//
// NobelPrizesMeta.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NobelPrizesMeta: Codable, JSONEncodable, Hashable {

    public var offset: Int?
    public var limit: Int?
    public var nobelPrizeYear: Int?
    public var yearTo: Int?
    public var nobelPrizeCategory: String?
    public var count: Int?

    public init(offset: Int? = nil, limit: Int? = nil, nobelPrizeYear: Int? = nil, yearTo: Int? = nil, nobelPrizeCategory: String? = nil, count: Int? = nil) {
        self.offset = offset
        self.limit = limit
        self.nobelPrizeYear = nobelPrizeYear
        self.yearTo = yearTo
        self.nobelPrizeCategory = nobelPrizeCategory
        self.count = count
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case offset
        case limit
        case nobelPrizeYear
        case yearTo
        case nobelPrizeCategory
        case count
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(nobelPrizeYear, forKey: .nobelPrizeYear)
        try container.encodeIfPresent(yearTo, forKey: .yearTo)
        try container.encodeIfPresent(nobelPrizeCategory, forKey: .nobelPrizeCategory)
        try container.encodeIfPresent(count, forKey: .count)
    }
}

