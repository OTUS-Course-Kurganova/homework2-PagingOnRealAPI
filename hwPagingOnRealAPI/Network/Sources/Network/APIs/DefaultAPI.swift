//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**

     - parameter laureateID: (path) Numeric Laureate&#39;s ID. Unique key. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func laureateLaureateIDGet(laureateID: Int, apiResponseQueue: DispatchQueue = NetworkAPI.apiResponseQueue, completion: @escaping ((_ data: [LaureateResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return laureateLaureateIDGetWithRequestBuilder(laureateID: laureateID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /laureate/{laureateID}
     - Obtain information about an specific Nobel Prize Laureate. Used as unique identifier.
     - parameter laureateID: (path) Numeric Laureate&#39;s ID. Unique key. 
     - returns: RequestBuilder<[LaureateResult]> 
     */
    open class func laureateLaureateIDGetWithRequestBuilder(laureateID: Int) -> RequestBuilder<[LaureateResult]> {
        var localVariablePath = "/laureate/{laureateID}"
        let laureateIDPreEscape = "\(APIHelper.mapValueToPathItem(laureateID))"
        let laureateIDPostEscape = laureateIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{laureateID}", with: laureateIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = NetworkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LaureateResult]>.Type = NetworkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_laureatesGet: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter gender
     */
    public enum Gender_laureatesGet: String, CaseIterable {
        case female = "female"
        case male = "male"
        case other = "other"
    }

    /**
     * enum for parameter birthContinent
     */
    public enum BirthContinent_laureatesGet: String, CaseIterable {
        case africa = "Africa"
        case asia = "Asia"
        case europe = "Europe"
        case northAmerica = "North America"
        case oceania = "Oceania"
        case southAmerica = "South America"
        case antarctica = "Antarctica"
    }

    /**
     * enum for parameter deathContinent
     */
    public enum DeathContinent_laureatesGet: String, CaseIterable {
        case africa = "Africa"
        case asia = "Asia"
        case europe = "Europe"
        case northAmerica = "North America"
        case oceania = "Oceania"
        case southAmerica = "South America"
        case antarctica = "Antarctica"
    }

    /**
     * enum for parameter foundedContinent
     */
    public enum FoundedContinent_laureatesGet: String, CaseIterable {
        case africa = "Africa"
        case asia = "Asia"
        case europe = "Europe"
        case northAmerica = "North America"
        case oceania = "Oceania"
        case southAmerica = "South America"
        case antarctica = "Antarctica"
    }

    /**
     * enum for parameter headquartersContinent
     */
    public enum HeadquartersContinent_laureatesGet: String, CaseIterable {
        case africa = "Africa"
        case asia = "Asia"
        case europe = "Europe"
        case northAmerica = "North America"
        case oceania = "Oceania"
        case southAmerica = "South America"
        case antarctica = "Antarctica"
    }

    /**
     * enum for parameter nobelPrizeCategory
     */
    public enum NobelPrizeCategory_laureatesGet: String, CaseIterable {
        case che = "che"
        case eco = "eco"
        case lit = "lit"
        case pea = "pea"
        case phy = "phy"
        case med = "med"
    }

    /**
     * enum for parameter format
     */
    public enum Format_laureatesGet: String, CaseIterable {
        case json = "json"
        case csv = "csv"
    }

    /**
     * enum for parameter csvLang
     */
    public enum CsvLang_laureatesGet: String, CaseIterable {
        case en = "en"
        case se = "se"
        case no = "no"
    }

    /**

     - parameter offset: (query) The number of items to skip before starting to collect the result set (optional)
     - parameter limit: (query) The numbers of items to return (optional)
     - parameter sort: (query) Sort order, result is sorted alphabetically by known name (optional)
     - parameter ID: (query) Numeric ID of the Laureate (unique key for each Nobel Laureate) (optional)
     - parameter name: (query) Laureate&#39;s name (person or organization) (optional)
     - parameter gender: (query) Laureate&#39;s gender if person (optional)
     - parameter motivation: (query) Text in Laureate&#39;s motivation (optional)
     - parameter affiliation: (query) Affiliation(s) for the Laureate at the time of the award (optional)
     - parameter residence: (query) Laureate&#39;s place of residence at the time is awarded (optional)
     - parameter birthDate: (query) Birth date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD (optional)
     - parameter birthDateTo: (query) Return Laureates born within a range of years between birthDate and birthDateTo. BirthDate field is required (optional)
     - parameter deathDate: (query) Death date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD (optional)
     - parameter deathDateTo: (query) Return Laureates deceased within a range of years between deathDate and deathhDateTo. DeathDate field is required (optional)
     - parameter foundedDate: (query) Founding date of Laureate if Organization. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD (optional)
     - parameter birthCity: (query) Laureate&#39;s city of birth if person (optional)
     - parameter birthCountry: (query) Laureate&#39;s country of birth if person (optional)
     - parameter birthContinent: (query) Laureate&#39;s continent of birth if person. Continent as in geonames.org standard (optional)
     - parameter deathCity: (query) Laureate&#39;s city of death if person (optional)
     - parameter deathCountry: (query) Laureate&#39;s country of death if person (optional)
     - parameter deathContinent: (query) Laureate&#39;s continent of death if person. Continent as in geonames.org standard (optional)
     - parameter foundedCity: (query) City where organization was founded (optional)
     - parameter foundedCountry: (query) Country where organization was founded (optional)
     - parameter foundedContinent: (query) Continent where organization was founded. Continent as in geonames.org standard (optional)
     - parameter headquartersCity: (query) City where organization&#39;s hearquarters are (optional)
     - parameter headquartersCountry: (query) Country where organization&#39;s hearquarters are (optional)
     - parameter headquartersContinent: (query) Continent where organization&#39;s hearquarters are. Continent as in geonames.org standard (optional)
     - parameter nobelPrizeYear: (query) The year for which the Nobel Prize was awarded, in the form of YYYY (optional)
     - parameter yearTo: (query) Used in combination with nobelPrizeYear to specify a range of years between nobelPrizeYear and YearTo. nobelPrizeYear is required (optional)
     - parameter nobelPrizeCategory: (query) Nobel Prize category. (optional)
     - parameter format: (query) Output format (Default &#x3D; json). (optional)
     - parameter csvLang: (query) Language if output format is csv (default &#x3D; en). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func laureatesGet(offset: Int? = nil, limit: Int? = nil, sort: Sort_laureatesGet? = nil, ID: Int? = nil, name: String? = nil, gender: Gender_laureatesGet? = nil, motivation: String? = nil, affiliation: String? = nil, residence: String? = nil, birthDate: Int? = nil, birthDateTo: Date? = nil, deathDate: Date? = nil, deathDateTo: Int? = nil, foundedDate: Date? = nil, birthCity: String? = nil, birthCountry: String? = nil, birthContinent: BirthContinent_laureatesGet? = nil, deathCity: String? = nil, deathCountry: String? = nil, deathContinent: DeathContinent_laureatesGet? = nil, foundedCity: String? = nil, foundedCountry: String? = nil, foundedContinent: FoundedContinent_laureatesGet? = nil, headquartersCity: String? = nil, headquartersCountry: String? = nil, headquartersContinent: HeadquartersContinent_laureatesGet? = nil, nobelPrizeYear: Int? = nil, yearTo: Int? = nil, nobelPrizeCategory: NobelPrizeCategory_laureatesGet? = nil, format: Format_laureatesGet? = nil, csvLang: CsvLang_laureatesGet? = nil, apiResponseQueue: DispatchQueue = NetworkAPI.apiResponseQueue, completion: @escaping ((_ data: LaureatesResult?, _ error: Error?) -> Void)) -> RequestTask {
        return laureatesGetWithRequestBuilder(offset: offset, limit: limit, sort: sort, ID: ID, name: name, gender: gender, motivation: motivation, affiliation: affiliation, residence: residence, birthDate: birthDate, birthDateTo: birthDateTo, deathDate: deathDate, deathDateTo: deathDateTo, foundedDate: foundedDate, birthCity: birthCity, birthCountry: birthCountry, birthContinent: birthContinent, deathCity: deathCity, deathCountry: deathCountry, deathContinent: deathContinent, foundedCity: foundedCity, foundedCountry: foundedCountry, foundedContinent: foundedContinent, headquartersCity: headquartersCity, headquartersCountry: headquartersCountry, headquartersContinent: headquartersContinent, nobelPrizeYear: nobelPrizeYear, yearTo: yearTo, nobelPrizeCategory: nobelPrizeCategory, format: format, csvLang: csvLang).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /laureates
     - Obtain information about Nobel Prize Laureates (persons and organizations) and their Nobel Prize(s), or search for a set of Laureates. Returns full information about the Laureates and Prizes.
     - parameter offset: (query) The number of items to skip before starting to collect the result set (optional)
     - parameter limit: (query) The numbers of items to return (optional)
     - parameter sort: (query) Sort order, result is sorted alphabetically by known name (optional)
     - parameter ID: (query) Numeric ID of the Laureate (unique key for each Nobel Laureate) (optional)
     - parameter name: (query) Laureate&#39;s name (person or organization) (optional)
     - parameter gender: (query) Laureate&#39;s gender if person (optional)
     - parameter motivation: (query) Text in Laureate&#39;s motivation (optional)
     - parameter affiliation: (query) Affiliation(s) for the Laureate at the time of the award (optional)
     - parameter residence: (query) Laureate&#39;s place of residence at the time is awarded (optional)
     - parameter birthDate: (query) Birth date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD (optional)
     - parameter birthDateTo: (query) Return Laureates born within a range of years between birthDate and birthDateTo. BirthDate field is required (optional)
     - parameter deathDate: (query) Death date of Laureate if Person. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD (optional)
     - parameter deathDateTo: (query) Return Laureates deceased within a range of years between deathDate and deathhDateTo. DeathDate field is required (optional)
     - parameter foundedDate: (query) Founding date of Laureate if Organization. Search by year in the form of YYYY, by month -MM-, by day -DD or YYYY-MM-DD (optional)
     - parameter birthCity: (query) Laureate&#39;s city of birth if person (optional)
     - parameter birthCountry: (query) Laureate&#39;s country of birth if person (optional)
     - parameter birthContinent: (query) Laureate&#39;s continent of birth if person. Continent as in geonames.org standard (optional)
     - parameter deathCity: (query) Laureate&#39;s city of death if person (optional)
     - parameter deathCountry: (query) Laureate&#39;s country of death if person (optional)
     - parameter deathContinent: (query) Laureate&#39;s continent of death if person. Continent as in geonames.org standard (optional)
     - parameter foundedCity: (query) City where organization was founded (optional)
     - parameter foundedCountry: (query) Country where organization was founded (optional)
     - parameter foundedContinent: (query) Continent where organization was founded. Continent as in geonames.org standard (optional)
     - parameter headquartersCity: (query) City where organization&#39;s hearquarters are (optional)
     - parameter headquartersCountry: (query) Country where organization&#39;s hearquarters are (optional)
     - parameter headquartersContinent: (query) Continent where organization&#39;s hearquarters are. Continent as in geonames.org standard (optional)
     - parameter nobelPrizeYear: (query) The year for which the Nobel Prize was awarded, in the form of YYYY (optional)
     - parameter yearTo: (query) Used in combination with nobelPrizeYear to specify a range of years between nobelPrizeYear and YearTo. nobelPrizeYear is required (optional)
     - parameter nobelPrizeCategory: (query) Nobel Prize category. (optional)
     - parameter format: (query) Output format (Default &#x3D; json). (optional)
     - parameter csvLang: (query) Language if output format is csv (default &#x3D; en). (optional)
     - returns: RequestBuilder<LaureatesResult> 
     */
    open class func laureatesGetWithRequestBuilder(offset: Int? = nil, limit: Int? = nil, sort: Sort_laureatesGet? = nil, ID: Int? = nil, name: String? = nil, gender: Gender_laureatesGet? = nil, motivation: String? = nil, affiliation: String? = nil, residence: String? = nil, birthDate: Int? = nil, birthDateTo: Date? = nil, deathDate: Date? = nil, deathDateTo: Int? = nil, foundedDate: Date? = nil, birthCity: String? = nil, birthCountry: String? = nil, birthContinent: BirthContinent_laureatesGet? = nil, deathCity: String? = nil, deathCountry: String? = nil, deathContinent: DeathContinent_laureatesGet? = nil, foundedCity: String? = nil, foundedCountry: String? = nil, foundedContinent: FoundedContinent_laureatesGet? = nil, headquartersCity: String? = nil, headquartersCountry: String? = nil, headquartersContinent: HeadquartersContinent_laureatesGet? = nil, nobelPrizeYear: Int? = nil, yearTo: Int? = nil, nobelPrizeCategory: NobelPrizeCategory_laureatesGet? = nil, format: Format_laureatesGet? = nil, csvLang: CsvLang_laureatesGet? = nil) -> RequestBuilder<LaureatesResult> {
        let localVariablePath = "/laureates"
        let localVariableURLString = NetworkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "ID": (wrappedValue: ID?.encodeToJSON(), isExplode: false),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: false),
            "gender": (wrappedValue: gender?.encodeToJSON(), isExplode: false),
            "motivation": (wrappedValue: motivation?.encodeToJSON(), isExplode: false),
            "affiliation": (wrappedValue: affiliation?.encodeToJSON(), isExplode: false),
            "residence": (wrappedValue: residence?.encodeToJSON(), isExplode: false),
            "birthDate": (wrappedValue: birthDate?.encodeToJSON(), isExplode: false),
            "birthDateTo": (wrappedValue: birthDateTo?.encodeToJSON(), isExplode: false),
            "deathDate": (wrappedValue: deathDate?.encodeToJSON(), isExplode: false),
            "deathDateTo": (wrappedValue: deathDateTo?.encodeToJSON(), isExplode: false),
            "foundedDate": (wrappedValue: foundedDate?.encodeToJSON(), isExplode: false),
            "birthCity": (wrappedValue: birthCity?.encodeToJSON(), isExplode: false),
            "birthCountry": (wrappedValue: birthCountry?.encodeToJSON(), isExplode: false),
            "birthContinent": (wrappedValue: birthContinent?.encodeToJSON(), isExplode: false),
            "deathCity": (wrappedValue: deathCity?.encodeToJSON(), isExplode: false),
            "deathCountry": (wrappedValue: deathCountry?.encodeToJSON(), isExplode: false),
            "deathContinent": (wrappedValue: deathContinent?.encodeToJSON(), isExplode: false),
            "foundedCity": (wrappedValue: foundedCity?.encodeToJSON(), isExplode: false),
            "foundedCountry": (wrappedValue: foundedCountry?.encodeToJSON(), isExplode: false),
            "foundedContinent": (wrappedValue: foundedContinent?.encodeToJSON(), isExplode: false),
            "HeadquartersCity": (wrappedValue: headquartersCity?.encodeToJSON(), isExplode: false),
            "HeadquartersCountry": (wrappedValue: headquartersCountry?.encodeToJSON(), isExplode: false),
            "HeadquartersContinent": (wrappedValue: headquartersContinent?.encodeToJSON(), isExplode: false),
            "nobelPrizeYear": (wrappedValue: nobelPrizeYear?.encodeToJSON(), isExplode: false),
            "yearTo": (wrappedValue: yearTo?.encodeToJSON(), isExplode: false),
            "nobelPrizeCategory": (wrappedValue: nobelPrizeCategory?.encodeToJSON(), isExplode: false),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: false),
            "csvLang": (wrappedValue: csvLang?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LaureatesResult>.Type = NetworkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter category
     */
    public enum Category_nobelPrizeCategoryYearGet: String, CaseIterable {
        case che = "che"
        case eco = "eco"
        case lit = "lit"
        case pea = "pea"
        case phy = "phy"
        case med = "med"
    }

    /**

     - parameter category: (path) Nobel Prize category 
     - parameter year: (path) Year for which the Nobel Prize was awarded, in the form of YYYY 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func nobelPrizeCategoryYearGet(category: Category_nobelPrizeCategoryYearGet, year: Int, apiResponseQueue: DispatchQueue = NetworkAPI.apiResponseQueue, completion: @escaping ((_ data: NobelPrizeResult?, _ error: Error?) -> Void)) -> RequestTask {
        return nobelPrizeCategoryYearGetWithRequestBuilder(category: category, year: year).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /nobelPrize/{category}/{year}
     - Obtain information about one specific Nobel Prize. Used as unique identifier for links.
     - parameter category: (path) Nobel Prize category 
     - parameter year: (path) Year for which the Nobel Prize was awarded, in the form of YYYY 
     - returns: RequestBuilder<NobelPrizeResult> 
     */
    open class func nobelPrizeCategoryYearGetWithRequestBuilder(category: Category_nobelPrizeCategoryYearGet, year: Int) -> RequestBuilder<NobelPrizeResult> {
        var localVariablePath = "/nobelPrize/{category}/{year}"
        let categoryPreEscape = "\(category.rawValue)"
        let categoryPostEscape = categoryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{category}", with: categoryPostEscape, options: .literal, range: nil)
        let yearPreEscape = "\(APIHelper.mapValueToPathItem(year))"
        let yearPostEscape = yearPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{year}", with: yearPostEscape, options: .literal, range: nil)
        let localVariableURLString = NetworkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NobelPrizeResult>.Type = NetworkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_nobelPrizesGet: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter nobelPrizeCategory
     */
    public enum NobelPrizeCategory_nobelPrizesGet: String, CaseIterable {
        case che = "che"
        case eco = "eco"
        case lit = "lit"
        case pea = "pea"
        case phy = "phy"
        case med = "med"
    }

    /**
     * enum for parameter format
     */
    public enum Format_nobelPrizesGet: String, CaseIterable {
        case json = "json"
        case csv = "csv"
    }

    /**
     * enum for parameter csvLang
     */
    public enum CsvLang_nobelPrizesGet: String, CaseIterable {
        case en = "en"
        case se = "se"
        case no = "no"
    }

    /**

     - parameter offset: (query) The number of items to skip before starting to collect the result set (optional)
     - parameter limit: (query) The numbers of items to return (optional)
     - parameter sort: (query) The sort order (result is sorted by year) (optional)
     - parameter nobelPrizeYear: (query) Year for which the Nobel Prize was awarded, in the form of YYYY (optional)
     - parameter yearTo: (query) Used in combination with nobelPrizeYear to specify a range of years to return results from. NobelPrizeYear is required (optional)
     - parameter nobelPrizeCategory: (query) Nobel Prize category (optional)
     - parameter format: (query) Format of output (Default &#x3D; json) (optional)
     - parameter csvLang: (query) Language of output if format is csv (Default &#x3D; en) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func nobelPrizesGet(offset: Int? = nil, limit: Int? = nil, sort: Sort_nobelPrizesGet? = nil, nobelPrizeYear: Int? = nil, yearTo: Int? = nil, nobelPrizeCategory: NobelPrizeCategory_nobelPrizesGet? = nil, format: Format_nobelPrizesGet? = nil, csvLang: CsvLang_nobelPrizesGet? = nil, apiResponseQueue: DispatchQueue = NetworkAPI.apiResponseQueue, completion: @escaping ((_ data: NobelPrizesResult?, _ error: Error?) -> Void)) -> RequestTask {
        return nobelPrizesGetWithRequestBuilder(offset: offset, limit: limit, sort: sort, nobelPrizeYear: nobelPrizeYear, yearTo: yearTo, nobelPrizeCategory: nobelPrizeCategory, format: format, csvLang: csvLang).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /nobelPrizes
     - Obtain information about all Nobel Prizes or search for a specific set of Nobel Prizes. Note that not all information about the Laureates are provided in the output, as a request of making this endpoints response lighter. Call the laureates endpoint for full information.
     - parameter offset: (query) The number of items to skip before starting to collect the result set (optional)
     - parameter limit: (query) The numbers of items to return (optional)
     - parameter sort: (query) The sort order (result is sorted by year) (optional)
     - parameter nobelPrizeYear: (query) Year for which the Nobel Prize was awarded, in the form of YYYY (optional)
     - parameter yearTo: (query) Used in combination with nobelPrizeYear to specify a range of years to return results from. NobelPrizeYear is required (optional)
     - parameter nobelPrizeCategory: (query) Nobel Prize category (optional)
     - parameter format: (query) Format of output (Default &#x3D; json) (optional)
     - parameter csvLang: (query) Language of output if format is csv (Default &#x3D; en) (optional)
     - returns: RequestBuilder<NobelPrizesResult> 
     */
    open class func nobelPrizesGetWithRequestBuilder(offset: Int? = nil, limit: Int? = nil, sort: Sort_nobelPrizesGet? = nil, nobelPrizeYear: Int? = nil, yearTo: Int? = nil, nobelPrizeCategory: NobelPrizeCategory_nobelPrizesGet? = nil, format: Format_nobelPrizesGet? = nil, csvLang: CsvLang_nobelPrizesGet? = nil) -> RequestBuilder<NobelPrizesResult> {
        let localVariablePath = "/nobelPrizes"
        let localVariableURLString = NetworkAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "nobelPrizeYear": (wrappedValue: nobelPrizeYear?.encodeToJSON(), isExplode: false),
            "yearTo": (wrappedValue: yearTo?.encodeToJSON(), isExplode: false),
            "nobelPrizeCategory": (wrappedValue: nobelPrizeCategory?.encodeToJSON(), isExplode: false),
            "format": (wrappedValue: format?.encodeToJSON(), isExplode: false),
            "csvLang": (wrappedValue: csvLang?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NobelPrizesResult>.Type = NetworkAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
